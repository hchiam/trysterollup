import {selfId as a,joinRoom as A} from'trystero/nostr';const{keys:c}=Object;export class GameController{constructor({updateUi:_,keydownListeners:B={},buttonListeners:C={},joystickListeners:d={},generatingDocumentation:e=!1,manuallyMapGamepadToActions:f=!1,hold3ButtonsFor3SecondsToRemapButtons:g=!1}){this.room=null;this.updateUi=_||function(){};this.localData={players:{[a]:{playerId:0}}};this.debug=!0;this.debugMore=!1;this.gamepads={};this.keydownListeners=B;this.buttonListeners=C;this.joystickListeners=d;this.#originalButtonListeners={};for(let _a of c(this.buttonListeners))this.#originalButtonListeners[_a]=this.buttonListeners[_a];this.#hold3ButtonsFor3SecondsToRemapButtons=g;this.#manuallyMapGamepadToActions=f;this.listenersToRemap={};f&&this.manuallyRemapButtons();!e&&(this.#sendData(this.localData),this.#initializeKeyboardSupport(),this.#initializeGamepadSupport())}#sendData=()=>{};#getData=()=>{};#originalButtonListeners={};#currentButton=null;#manuallyMapGamepadToActions=!1;#manuallyRemapLastButtonTimeout=null;#hold3ButtonsFor3SecondsToRemapButtons=!1;#remapButtonsHoldTimer=null;#remapButtonsDelayTimer=null;join(){this.debug&&console.log('join');this.room=A(...arguments);const[D,_b]=this.room.makeAction('data');this.#sendData=D;this.#getData=_b;this.#initializeRoomEventListeners();return this.room}startGame(){this.update();return this}update(_A=null){_A&&(this.localData=_A);this.updateUi();this.#sendData(this.localData);return this}updatePosition(E=0,_B=0,_c=a){const{x,y}=this.localData.players[_c];this.localData.players[_c].x=x===void 0?E:+x+ +E;this.localData.players[_c].y=y===void 0?_B:+y+ +_B;this.update();return this}isManuallyRemappingButtons(){var aA=c(this.listenersToRemap);return aA.length>0}manuallyRemapButtons(){this.#manuallyMapGamepadToActions=!0;this.listenersToRemap={};for(let aB of c(this.buttonListeners))this.listenersToRemap[`toRemap:${aB}`]=this.#originalButtonListeners[aB]}getCurrentlyOnButtonsPerGamepad(){return this.gamepads.map(gp=>gp.buttons.map((b,i)=>({i,on:b.pressed||b.touched})).filter(b=>b.on).map(b=>b.i))}#initializeRoomEventListeners(){this.#signalNewcomers();this.#listenForPeersSendingData();this.#listenForPeersLeaving()}#signalNewcomers(){this.room?.onPeerJoin(aC=>{this.#syncPlayerIdOfIncomingPeer(aC);this.debug&&console.log('onPeerJoin',aC);this.updateUi()})}#listenForPeersSendingData(){this.#getData((aD,aE)=>{this.debugMore&&(console.log(`-----|\n\this.localData BEFORE:\n${JSON.stringify(this.localData)}`),console.log('#getData data peerId',JSON.stringify(aD),aE));for(const x of Object.entries(aD))this.localData[x[0]]=x[1];this.#syncPlayerIdOfIncomingPeer(aE);this.debugMore&&console.log(`this.localData AFTER:\n${JSON.stringify(this.localData)}\n\n|-----`);this.updateUi()})}#syncPlayerIdOfIncomingPeer(aF){var aG=JSON.stringify(this.localData);!(aF in this.localData.players)&&(this.localData.players[aF]={playerId:0});var _C=!isNaN(this.localData.players[aF].playerId)&&this.localData.players[aF].playerId===0;if(_C){var _d=Math.max(...Object.values(this.localData.players).map(x=>isNaN(x.playerId)?0:+x.playerId));this.localData.players[aF].playerId=Math.max(_d+1,c(this.localData.players).length-1);this.#updateHost()}let _e=_C||aG!==JSON.stringify(this.localData);_e&&this.#sendData(this.localData)}#listenForPeersLeaving(){this.room?.onPeerLeave(aH=>{delete this.localData.players[aH];this.debug&&console.log('onPeerLeave',aH);this.#updateHost();this.updateUi()})}#updateHost(){let aI=0;let aJ=null;for(const aL of Object.entries(this.localData.players)){var aK=aL[1];aK.isHost=!1;var _D=aK.playerId>aI;_D&&(aI=aK.playerId,aJ=aL[0])}this.localData.players[aJ].isHost=!0;this.update()}#initializeKeyboardSupport(){document.querySelector('body').addEventListener('keydown',aM=>{switch(aM.key.toLowerCase()) {case 'arrowleft':case 'a':this.keydownListeners?.left?.(aM);break;case 'arrowright':case 'd':this.keydownListeners?.right?.(aM);break;case 'arrowup':case 'w':this.keydownListeners?.up?.(aM);break;case 'arrowdown':case 's':this.keydownListeners?.down?.(aM);break}})}#initializeGamepadSupport(){var aN='getGamepads' in navigator;aN&&(window.addEventListener('gamepadconnected',aO=>{if(this.debug)console.log('gamepad connected:',aO.gamepad);setTimeout(()=>this.updateUi(),100)}),window.addEventListener('gamepaddisconnected',aP=>{if(this.debug)console.log('gamepad disconnected:',aP.gamepad);setTimeout(()=>this.updateUi(),100)}),this.#pollGamepads(aQ=>{if(aQ?.length)this.#mapGamepadToActions(aQ[0])}))}#pollGamepads(aR=()=>{}){this.gamepads=navigator.getGamepads().filter(Boolean);aR(this.gamepads);window.requestAnimationFrame(this.#pollGamepads.bind(this,aR))}#mapGamepadToActions(aS){if(!aS)return;var aT=aS.buttons;if(aT?.length)for(const[i,aW] of aT.entries())if(aW.pressed||aW.touched){var aU=aW;if(this.#manuallyMapGamepadToActions)if(this.isManuallyRemappingButtons()){var aV=c(this.listenersToRemap),_E=aV[0],F=this.listenersToRemap[_E];if(this.#currentButton!==aU){this.#currentButton=aU;this.buttonListeners[i]=F;aV.length===1?(clearTimeout(this.#manuallyRemapLastButtonTimeout),this.#manuallyRemapLastButtonTimeout=setTimeout(()=>delete this.listenersToRemap[_E],200)):(delete this.listenersToRemap[_E])}}if(!(this.#hold3ButtonsFor3SecondsToRemapButtons&&this.getCurrentlyOnButtonsPerGamepad().some(aX=>aX.length===3))){var G=this.buttonListeners[i];G?.(aU)}else this.#remapButtonsHoldTimer===null&&(this.#remapButtonsHoldTimer=setTimeout(()=>{clearTimeout(this.#remapButtonsDelayTimer);this.#remapButtonsDelayTimer=setTimeout(()=>{this.manuallyRemapButtons();clearTimeout(this.#remapButtonsDelayTimer);clearTimeout(this.#remapButtonsHoldTimer);this.#remapButtonsHoldTimer=null},3000)},3000))}var h=aS.axes;if(h?.length)for(const[i,aY] of h.entries()){var I=this.joystickListeners[i];I?.(aY)}}}
