import {selfId as a,joinRoom as b} from'trystero/nostr';const{keys:c}=Object;export class GameController{constructor({updateUi:A,keydownListeners:_={},buttonListeners:B={},joystickListeners:d={},generatingDocumentation:e=!1,manuallyMapGamepadToActions:f=!0}){this.room=null;this.updateUi=A||function(){};this.localData={players:{[a]:{playerId:0}}};this.debug=!0;this.debugMore=!1;this.gamepads={};this.keydownListeners=_;this.buttonListeners=B;this.joystickListeners=d;this.actionsToRemap={};if(f)for(let C of c(B))this.actionsToRemap[-C-1]=B[C];!e&&(this.#sendData(this.localData),this.#initializeKeyboardSupport(),this.#initializeGamepadSupport(f))}#sendData=()=>{};#getData=()=>{};#currentButton=null;#manuallyRemapLastButtonTimeout=null;join(){this.debug&&console.log('join');this.room=b(...arguments);const[_a,_b]=this.room.makeAction('data');this.#sendData=_a;this.#getData=_b;this.#initializeRoomEventListeners();return this.room}startGame(){this.update();return this}update(D=null){D&&(this.localData=D);this.updateUi();this.#sendData(this.localData);return this}updatePosition(_A=0,_B=0,_c=a){const{x,y}=this.localData.players[_c];this.localData.players[_c].x=x===void 0?_A:+x+ +_A;this.localData.players[_c].y=y===void 0?_B:+y+ +_B;this.update();return this}isManuallyRemappingButtons(){var E=c(this.actionsToRemap).filter(key=>key<0);return E.length>0}#initializeRoomEventListeners(){this.#signalNewcomers();this.#listenForPeersSendingData();this.#listenForPeersLeaving()}#signalNewcomers(){this.room?.onPeerJoin(aA=>{this.#syncPlayerIdOfIncomingPeer(aA);this.debug&&console.log('onPeerJoin',aA);this.updateUi()})}#listenForPeersSendingData(){this.#getData((aB,aC)=>{this.debugMore&&(console.log(`-----|\n\this.localData BEFORE:\n${JSON.stringify(this.localData)}`),console.log('#getData data peerId',JSON.stringify(aB),aC));for(const x of Object.entries(aB))this.localData[x[0]]=x[1];this.#syncPlayerIdOfIncomingPeer(aC);this.debugMore&&console.log(`this.localData AFTER:\n${JSON.stringify(this.localData)}\n\n|-----`);this.updateUi()})}#syncPlayerIdOfIncomingPeer(aD){var aE=JSON.stringify(this.localData);!(aD in this.localData.players)&&(this.localData.players[aD]={playerId:0});var _C=!isNaN(this.localData.players[aD].playerId)&&this.localData.players[aD].playerId===0;if(_C){var _d=Math.max(...Object.values(this.localData.players).map(x=>isNaN(x.playerId)?0:+x.playerId));this.localData.players[aD].playerId=Math.max(_d+1,c(this.localData.players).length-1);this.#updateHost()}let _e=_C||aE!==JSON.stringify(this.localData);_e&&this.#sendData(this.localData)}#listenForPeersLeaving(){this.room?.onPeerLeave(aF=>{delete this.localData.players[aF];this.debug&&console.log('onPeerLeave',aF);this.#updateHost();this.updateUi()})}#updateHost(){let aG=0;let aH=null;for(const aJ of Object.entries(this.localData.players)){var aI=aJ[1];aI.isHost=!1;var _D=aI.playerId>aG;_D&&(aG=aI.playerId,aH=aJ[0])}this.localData.players[aH].isHost=!0;this.update()}#initializeKeyboardSupport(){document.querySelector('body').addEventListener('keydown',aK=>{switch(aK.key.toLowerCase()) {case 'arrowleft':case 'a':this.keydownListeners?.left?.(aK);break;case 'arrowright':case 'd':this.keydownListeners?.right?.(aK);break;case 'arrowup':case 'w':this.keydownListeners?.up?.(aK);break;case 'arrowdown':case 's':this.keydownListeners?.down?.(aK);break}})}#initializeGamepadSupport(aL=!1){var aM='getGamepads' in navigator;aM&&(window.addEventListener('gamepadconnected',aN=>{if(this.debug)console.log('gamepad connected:',aN.gamepad);setTimeout(()=>this.updateUi(),100)}),window.addEventListener('gamepaddisconnected',aO=>{if(this.debug)console.log('gamepad disconnected:',aO.gamepad);setTimeout(()=>this.updateUi(),100)}),this.#pollGamepads(aP=>{if(aP?.length)this.#mapGamepadToActions(aP[0],{manuallyMap:aL})}))}#pollGamepads(aQ=()=>{}){this.gamepads=navigator.getGamepads().filter(Boolean);aQ(this.gamepads);window.requestAnimationFrame(this.#pollGamepads.bind(this,aQ))}#mapGamepadToActions(aR,{manuallyMap:aS=!1}){if(!aR)return;var aT=aR.buttons;if(aT?.length)for(const[i,aV] of aT.entries())if(aV.pressed||aV.touched){var aU=aV;if(aS)if(this.isManuallyRemappingButtons()){var _E=c(this.actionsToRemap).filter(key=>key<0),F=_E[0],g=this.actionsToRemap[F];if(this.#currentButton!==aU){this.#currentButton=aU;this.buttonListeners[i]=g;_E.length===1?(clearTimeout(this.#manuallyRemapLastButtonTimeout),this.#manuallyRemapLastButtonTimeout=setTimeout(()=>delete this.actionsToRemap[F],200)):(delete this.actionsToRemap[F])}}var h=this.buttonListeners[i];h?.(aU)}var I=aR.axes;if(I?.length)for(const[i,aW] of I.entries()){var j=this.joystickListeners[i];j?.(aW)}}}
